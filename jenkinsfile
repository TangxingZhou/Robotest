pipeline {
    agent none
    /*triggers {
        cron('H */4 * * 1-5')
    }*/

    parameters {
        string(name: 'OWNCLOUD_SERVER', defaultValue: '172.16.1.97:8080', description: 'The host url of OWN Cloud server.')
        string(name: 'JENKINS_SERVER', defaultValue: '172.16.1.161:31835', description: 'The host url of jenkins server.')
        string(name: 'GitLab_TOS_Test_Group_URL', defaultValue: 'http://sudong:${sudong}@172.16.1.41:10080/QA/tos_test', description: 'The URL for the TOS group in gitlab.')
        string(name: 'TOS_Tests_Branch', defaultValue: 'tos-txzhou', description: 'The branch for the tests to run.')
        string(name: 'Cluster_Host_Machine_Label', defaultValue: 'regression_172_26_0_13', description: 'The label for the host machine on which TOS cluster is running.')
        string(name: 'Cluster_Main_Node_Label', defaultValue: 'regression_172_26_5_16', description: 'The label for the main node in TOS cluster.')
        string(name: 'OS_Version', defaultValue: 'centos76', description: 'The version of operation system on cluster nodes.')
        string(name: 'TOS_Version', defaultValue: 'tos-1.9', description: 'The version of TOS to install.')
        string(name: 'Report_Email_Recipients', defaultValue: 'tangxing.zhou@transwarp.io', description: 'The list of recipients that will receive the report email.')
    }

    stages {
        stage('Restore Cluster') {
            agent {
                 label "${params.Cluster_Host_Machine_Label}"
            }
            steps {
                echo "########## Restore TOS nodes in cluster ##########"
                // Clean up the workspace on host machine
                sh 'rm -rf *'
                // Checkout codes
                sh "git clone -b txzhou ${params.GitLab_TOS_Test_Group_URL}/kvmrestore.git"
                // Restore the VMs for cluster
                sh '''
                    cd kvmrestore/
                    os_version=${OS_Version}
                    cat > conf.yml << EOF
nodes:
    node01:
        roles: "deploy,master,slave,FSformat,ftp,registry,ntpServer,etcd,rook-ceph"
        ip: "172.26.5.16"
        netmask: "255.255.255.0"
        gateway: "172.26.5.254"
        hostname: "tos-516"
        os: "${os_version}"
        memory: "15000"
        vcpu: "4"
        snapshot: "mostclean"
        diskpath: "/mnt/disk1"
        datadisks: {vdb: "50G", vdc: "50G", vdd: "50G", vde: "50G", vdf: "10G", vdg: "10G"}
    node02:
        roles: "deploy,master,slave,FSformat,rook-ceph"
        ip: "172.26.5.17"
        netmask: "255.255.255.0"
        gateway: "172.26.5.254"
        hostname: "tos-517"
        os: "${os_version}"
        memory: "15000"
        vcpu: "4"
        snapshot: "mostclean"
        diskpath: "/mnt/disk1"
        datadisks: {vdb: "50G", vdc: "50G", vdd: "50G", vde: "50G", vdf: "10G", vdg: "10G"}
    node03:
        roles: "deploy,master,slave,FSformat,rook-ceph"
        ip: "172.26.5.18"
        netmask: "255.255.252.0"
        gateway: "172.26.5.254"
        hostname: "tos-518"
        os: "${os_version}"
        memory: "15000"
        vcpu: "4"
        snapshot: "mostclean"
        diskpath: "/mnt/disk1"
        datadisks: {vdb: "50G", vdc: "50G", vdd: "50G", vde: "50G", vdf: "10G", vdg: "10G"}
    node04:
        roles: "deploy,slave,FSformat"
        ip: "172.26.5.19"
        netmask: "255.255.252.0"
        gateway: "172.26.5.254"
        hostname: "tos-519"
        os: "${os_version}"
        memory: "15000"
        vcpu: "4"
        snapshot: "mostclean"
        diskpath: "/mnt/disk1"
        datadisks: {vdb: "50G", vdc: "50G", vdd: "50G", vde: "50G", vdf: "10G", vdg: "10G"}
    node05:
        roles: "deploy,slave,FSformat"
        ip: "172.26.5.20"
        netmask: "255.255.252.0"
        gateway: "172.26.5.254"
        hostname: "tos-520"
        os: "${os_version}"
        memory: "15000"
        vcpu: "4"
        snapshot: "mostclean"
        diskpath: "/mnt/disk1"
        datadisks: {vdb: "50G", vdc: "50G", vdd: "50G", vde: "50G", vdf: "10G", vdg: "10G"}
EOF
                    bash -x removevm.sh || exit 1
                    bash -x autoinstall.sh || exit 1
                    sleep 10
                '''
                 // Make the main node of cluster online in jenkins
                sh '''
                    cd kvmrestore/
                    python node_online.py $JENKINS_SERVER ${Cluster_Main_Node_Label}
                    sleep 10
                '''
            }
        }

        stage('Install TOS') {
            agent {
                label "${params.Cluster_Main_Node_Label}"
            }
            steps {
                echo "########## Setup TOS cluster ##########"
                // Clean up the workspace on main node
                sh 'rm -rf *'
                // Checkout codes
                sh "git clone -b txzhou ${params.GitLab_TOS_Test_Group_URL}/install.git"
                // Download tos packages and setup tos cluster
                sh '''
                    cd install/
                    ./download_package.sh ${OWNCLOUD_SERVER} ${TOS_Version} internal
                    ./tos_install.sh
                '''
                 // Create warpdirve pool on nodes
                 sh '''
                     cd install/
                     ./warpdrive_createpool.sh
                '''
             }
         }

        stage('Test') {
            agent {
                label "${params.Cluster_Main_Node_Label}"
            }

            steps {
                echo "########## Start to run tests ##########"
                // Wait until the init.sh script exits
                sh '''
                    pid=$(ps -ef | grep -v grep | grep "/root/init.sh" | awk '{print $2}')
                    if [ ! -z $pid ]; then
                        while [ -e /proc/$pid ]; do
                            sleep 2
                        done
                    fi
                    rm -rf *
                '''
                // Checkout codes
                sh "git clone -b ${params.TOS_Tests_Branch} ${params.GitLab_TOS_Test_Group_URL}/robot.git"
                // Init the host machine
                sh '''
                    cd robot
                    ./run_tests.sh --init
                '''
                // Run tests
                sh '''
                    cd robot
                    ./run_tests.sh --cluster $HOSTIP --variable SendEmail:$Send_Email --variable MergeResults:Y tests/TOS/smoke
                '''
                // Set RobotPublisher
                step([  $class              : 'RobotPublisher',
                        disableArchiveOutput: false,
                        outputPath          : 'robot/out',
                        reportFileName      : 'report.html',
                        outputFileName      : 'output.xml',
                        logFileName         : 'log.html',
                        otherFiles          : '',
                        passThreshold       : 100,
                        unstableThreshold   : 90
                ])

                step([  $class               : 'publishHTML',
                        allowMissing         : false,
                        alwaysLinkToLastBuild: false,
                        keepAll              : true,
                        reportDir            : 'robot/out',
                        reportFiles          : 'log.html',
                        reportName           : 'Robot Log'
                ])
            }
        }
        stage('Send Email') {
            agent {
                label "${params.Cluster_Main_Node_Label}"
            }
            steps {
                echo "########## Send Email Report ##########"
                script {
                    def email_report_file = 'robot/out/TOS/email_report.html'
                    def email_body=readFile(email_report_file)
                    def result_color = [SUCCESS: '#27AE60', FAILURE: '#E74C3C', UNSTABLE: '#F4E242']

                    def build = [
                        result: "${currentBuild.currentResult}",
                        color: result_color["${currentBuild.currentResult}"],
                        url: "${env.BUILD_URL}",
                        name: "${env.JOB_NAME}",
                        date: new Date().format("EEE, dd MMM yyyy HH:mm:ss z"),
                        //date: new Date(new Long("${currentBuild.startTimeInMillis}").longValue()).format("EEE, dd MMM yyyy HH:mm:ss z"),
                        duration: "${currentBuild.durationString}".replace(' and counting', '')
                    ]

                    build.each{key, value ->
                        email_body = email_body.replace("\${" + key + "}", value)
                    }

                    writeFile file: email_report_file, text: email_body

                    emailext(
                        recipientProviders: [[$class: 'DevelopersRecipientProvider'], [$class: 'RequesterRecipientProvider']],
                        subject: "[TOS] ${env.JOB_NAME} - ${env.BUILD_DISPLAY_NAME} - ${currentBuild.currentResult}",
                        to: "${params.Report_Email_Recipients}",
                        mimeType: "text/html",
                        body: email_body
                    )
                }
                // Archive the built artifacts
                archive (includes: 'robot/out/TOS/**/*')
            }
        }
    }
}